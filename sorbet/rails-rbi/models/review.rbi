# This is an autogenerated file for dynamic methods in Review
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class Review::Relation < ActiveRecord::Relation
  include Review::NamedScope
  extend T::Generic
  Elem = type_member(fixed: Review)
end

class Review < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend Review::NamedScope
  Elem = type_template(fixed: Review)

  sig { returns(T.nilable(Course)) }
  def course(); end

  sig { params(value: T.nilable(Course)).void }
  def course=(value); end

  sig { returns(T.nilable(Integer)) }
  def course_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def course_id=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T.nilable(Integer)) }
  def difficulty(); end

  sig { params(value: T.nilable(Integer)).void }
  def difficulty=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def experience_with_topic(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def experience_with_topic=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def experience_with_topic?(*args); end

  sig { returns(T.nilable(Integer)) }
  def grade(); end

  sig { params(value: T.nilable(Integer)).void }
  def grade=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(String)) }
  def notes(); end

  sig { params(value: T.nilable(String)).void }
  def notes=(value); end

  sig { returns(T.nilable(Integer)) }
  def rating(); end

  sig { params(value: T.nilable(Integer)).void }
  def rating=(value); end

  sig { returns(T.nilable(School)) }
  def school(); end

  sig { params(value: T.nilable(School)).void }
  def school=(value); end

  sig { returns(T.nilable(Integer)) }
  def term(); end

  sig { params(value: T.nilable(Integer)).void }
  def term=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(T.nilable(User)) }
  def user(); end

  sig { params(value: T.nilable(User)).void }
  def user=(value); end

  sig { returns(T.nilable(Integer)) }
  def user_id(); end

  sig { params(value: T.nilable(Integer)).void }
  def user_id=(value); end

  sig { returns(T.nilable(Integer)) }
  def work_required(); end

  sig { params(value: T.nilable(Integer)).void }
  def work_required=(value); end

  sig { returns(T.nilable(Integer)) }
  def year(); end

  sig { params(value: T.nilable(Integer)).void }
  def year=(value); end

end


module Review::NamedScope
  extend T::Sig

  sig { returns(Review::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def search_query(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def sorted_by(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def with_course_id(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def with_difficulty_lte(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def with_rating_gte(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def with_school_id(*args); end

  sig { params(args: T.untyped).returns(Review::Relation) }
  def with_work_required_lte(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(Review::Relation) }
  def except(*args, block); end

end

