# This is an autogenerated file for dynamic methods in User
# Please rerun rake rails_rbi:models to regenerate.
# typed: strong

class User::Relation < ActiveRecord::Relation
  include User::NamedScope
  extend T::Generic
  Elem = type_member(fixed: User)
end

class User < ApplicationRecord
  extend T::Sig
  extend T::Generic
  extend User::NamedScope
  Elem = type_template(fixed: User)

  sig { returns(T.nilable(DateTime)) }
  def confirmation_sent_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmation_sent_at=(value); end

  sig { returns(T.nilable(String)) }
  def confirmation_token(); end

  sig { params(value: T.nilable(String)).void }
  def confirmation_token=(value); end

  sig { returns(T.nilable(DateTime)) }
  def confirmed_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def confirmed_at=(value); end

  sig { returns(DateTime) }
  def created_at(); end

  sig { params(value: DateTime).void }
  def created_at=(value); end

  sig { returns(T.nilable(DateTime)) }
  def current_sign_in_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def current_sign_in_at=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def current_sign_in_ip(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def current_sign_in_ip=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def deactivated(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def deactivated=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def deactivated?(*args); end

  sig { returns(String) }
  def email(); end

  sig { params(value: String).void }
  def email=(value); end

  sig { returns(String) }
  def encrypted_password(); end

  sig { params(value: String).void }
  def encrypted_password=(value); end

  sig { returns(Integer) }
  def id(); end

  sig { params(value: Integer).void }
  def id=(value); end

  sig { returns(T.nilable(T::Boolean)) }
  def is_admin(); end

  sig { params(value: T.nilable(T::Boolean)).void }
  def is_admin=(value); end

  sig { params(args: T.untyped).returns(T::Boolean) }
  def is_admin?(*args); end

  sig { returns(T.nilable(DateTime)) }
  def last_sign_in_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def last_sign_in_at=(value); end

  sig { returns(T.nilable(T.untyped)) }
  def last_sign_in_ip(); end

  sig { params(value: T.nilable(T.untyped)).void }
  def last_sign_in_ip=(value); end

  sig { returns(T.nilable(DateTime)) }
  def remember_created_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def remember_created_at=(value); end

  sig { returns(T.nilable(DateTime)) }
  def reset_password_sent_at(); end

  sig { params(value: T.nilable(DateTime)).void }
  def reset_password_sent_at=(value); end

  sig { returns(T.nilable(String)) }
  def reset_password_token(); end

  sig { params(value: T.nilable(String)).void }
  def reset_password_token=(value); end

  sig { returns(Review::Relation) }
  def reviews(); end

  sig { params(value: T.any(T::Array[Review], Review::Relation)).void }
  def reviews=(value); end

  sig { returns(Integer) }
  def sign_in_count(); end

  sig { params(value: Integer).void }
  def sign_in_count=(value); end

  sig { returns(T.nilable(String)) }
  def unconfirmed_email(); end

  sig { params(value: T.nilable(String)).void }
  def unconfirmed_email=(value); end

  sig { returns(DateTime) }
  def updated_at(); end

  sig { params(value: DateTime).void }
  def updated_at=(value); end

  sig { returns(String) }
  def uuid(); end

  sig { params(value: String).void }
  def uuid=(value); end

end


module User::NamedScope
  extend T::Sig

  sig { returns(User::Relation) }
  def all(); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def admins(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def search_query(*args); end

  sig { params(args: T.untyped).returns(User::Relation) }
  def sorted_by(*args); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def select(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def order(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def reorder(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def group(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def limit(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def offset(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def left_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def left_outer_joins(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def where(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def rewhere(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def preload(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def eager_load(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def includes(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def from(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def lock(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def readonly(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def extending(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def or(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def having(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def create_with(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def distinct(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def references(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def none(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def unscope(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def merge(*args, block); end

  sig { params(args: T.untyped, block: T.nilable(T.proc.void)).returns(User::Relation) }
  def except(*args, block); end

end

